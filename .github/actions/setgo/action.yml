name: 'Setup Go Faster'
description: like actions/setup-go but faster
inputs:
  ignore-local:
    required: false
    description: |
      Normally a pre-installed version of go that meets the go-version constraints will be used instead
      of checking whether a newer version is available for download. With ignore-local, the
      action will always check for a newer version available for download. Set this to any non-empty value
      to enable.
  go-version:
    required: true
    description: |
      The version of go to install. It can be an exact version or a semver constraint like '1.14.x' or '^1.14.4'
outputs:
  GOCACHE:
    description: go env GOCACHE
    value: ${{ steps.install-go.outputs.GOCACHE }}
  GOMODCACHE:
    description: go env GOMODCACHE
    value: ${{ steps.install-go.outputs.GOMODCACHE }}
  GOPATH:
    description: go env GOPATH
    value: ${{ steps.install-go.outputs.GOPATH }}
  GOROOT:
    description: go env GOROOT
    value: ${{ steps.install-go.outputs.GOROOT }}
  GOTOOLDIR:
    description: go env GOTOOLDIR
    value: ${{ steps.install-go.outputs.GOTOOLDIR }}
runs:
  using: composite
  steps:
    - id: resolve-go-version
      env:
        DEBUG: ""
      shell: bash
      run: |
        set -e
        [ -n "$DEBUG" ] && set -x

        export IGNORE_LOCAL_GO='${{ inputs.ignore-local }}'

        constraint='${{ inputs.go-version }}'
        if [ '${{ inputs.go-version }}' = "tip" ] || [ '${{ inputs.go-version }}' = "gotip" ]; then
          constraint='*'
          echo "INSTALL_GO_TIP=1" >> "$GITHUB_ENV"
        fi
        got="$(src/resolve-go-version "$constraint" '${{ runner.tool_cache }}/go')"
        if [ -z "$got" ]; then
          echo "::error ::No go version found matching '${{ inputs.go-version }}'"
          exit 1
        fi
        echo "INSTALL_GO_VERSION=$got" >> "$GITHUB_ENV"
    - id: install-go
      env:
        DEBUG: ""
      shell: bash
      run: src/install-go
