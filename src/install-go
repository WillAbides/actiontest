#!/bin/bash

# required global vars:
# INSTALL_GO_VERSION=1.2.3  # the version of go to install
# RUNNER_OS                 # provided by action
# RUNNER_TOOL_CACHE         # provided by action
#
# optional vars:
# INSTALL_GO_FORCE                                     # set to non-empty to force the install

set -e

if [ -z "$INSTALL_GO_VERSION" ]; then
  echo "INSTALL_GO_VERSION is required"
  exit 1
fi

export GOROOT=""
export GO111MODULE=off

homedir() {
  if [ "$(uname -s)" = "Windows" ]; then
    echo "$USERPROFILE"
  else
    echo "$HOME"
  fi
}

sdk_dir() {
  echo "$(homedir)/sdk"
}

goos() {
  case "$RUNNER_OS" in
  macOS)
    echo "darwin"
    ;;
  Linux)
    echo "linux"
    ;;
  Windows)
    echo "windows"
    ;;
  *)
    uname -s | tr '[:upper:]' '[:lower:]'
    ;;
  esac
}

extension() {
  if [ "$(goos)" = "windows" ]; then
    echo ".zip"
  else
    echo ".tar.gz"
  fi
}

version_archive_name() {
  local version="$1"
  echo "$version.$(goos)-amd64$(extension)"
}

init_tmpdir() {
  local tmpdir="$RUNNER_TEMP"
  tmpdir="${tmpdir:-"$TMPDIR"}"
  tmpdir="$tmpdir/install-go"
  mkdir -p "$tmpdir"
  rm -rf "$tmpdir"
  mkdir -p "$tmpdir"
  trap 'rm -rf "$tmpdir"' EXIT
  echo "$tmpdir"
}

install_go() {
  target_dir="$1"
  rm -rf "$target_dir"
  mkdir -p "$(dirname "$target_dir")"
  tmpdir="$(init_tmpdir)"
  cd "$tmpdir"

  archive_name="$(version_archive_name go"$INSTALL_GO_VERSION")"

  # 4 retries is 15 seconds of waiting
  curl --retry 4 --fail -O "https://storage.googleapis.com/golang/$archive_name"

  if [ "$(extension)" = ".zip" ]; then
    unzip -q "$archive_name"
  else
    tar -xzf "$archive_name"
  fi
  mv "go" "$target_dir"

  cd -
}

exe_name() {
  suffix=""
  [ "$(goos)" = "windows" ] && suffix=".exe"
  echo "$1$suffix"
}

target_dir="$RUNNER_TOOL_CACHE/go/$INSTALL_GO_VERSION/x64"

tip_target_dir="$RUNNER_TOOL_CACHE/go/tip/x64"

if [ -d "$target_dir" ]; then
  echo "$target_dir" already exists
  if [ -z "$INSTALL_GO_FORCE" ]; then
    skip_install=1
  fi
fi

[ -n "$skip_install" ] || install_go "$target_dir"

GITHUB_ENV="${GITHUB_ENV:-/dev/null}"
GITHUB_PATH="${GITHUB_PATH:-/dev/null}"

echo "$target_dir/bin" >>"$GITHUB_PATH"
PATH="$target_dir/bin:$PATH"

gopath=$(go env GOPATH)
mkdir -p "$gopath/bin"
echo "$gopath/bin" >>"$GITHUB_PATH"
PATH="$gopath/bin:$PATH"

unset GOROOT
echo "GOROOT=" >>"$GITHUB_ENV"

if [ -n "$INSTALL_GO_TIP" ]; then
  GO111MODULE=off go get golang.org/dl/gotip
  "$gopath/bin/$(exe_name gotip)" download
  rm -rf "$tip_target_dir"
  mkdir -p "$(dirname "$tip_target_dir")"
  mv "$(sdk_dir)/gotip" "$tip_target_dir"

  PATH="$tip_target_dir/bin:$PATH"
  echo "$tip_target_dir/bin" >>"$GITHUB_PATH"
fi

govars='GOCACHE
GOMODCACHE
GOPATH
GOROOT
GOTOOLDIR'

for var in $govars; do
  echo "::set-output name=$var::$(go env "$var")"
done
